const withPlugins = require("next-compose-plugins");
const withBundleAnalyzer = require("@next/bundle-analyzer")({
  enabled: process.env.ANALYZE === "true",
});
const withTM = require("next-transpile-modules")([
  "bail",
  "ccount",
  "character-entities",
  "character-entities-html4",
  "character-entities-legacy",
  "character-reference-invalid",
  "colorette",
  "comma-separated-tokens",
  "flatted",
  "hast-to-hyperscript",
  "hast-util-raw",
  "hast-util-sanitize",
  "hast-util-to-html",
  "hast-util-to-parse5",
  "hast-util-whitespace",
  "html-void-elements",
  "is-alphabetical",
  "is-alphanumerical",
  "is-hexadecimal",
  "is-plain-obj",
  "mdast-util-definitions",
  "mdast-util-from-markdown",
  "mdast-util-to-hast",
  "mdast-util-to-string",
  "micromark",
  "micromark-core-commonmark",
  "micromark-factory-destination",
  "micromark-factory-label",
  "micromark-factory-space",
  "micromark-factory-title",
  "micromark-factory-whitespace",
  "micromark-util-character",
  "micromark-util-chunked",
  "micromark-util-classify-character",
  "micromark-util-combine-extensions",
  "micromark-util-decode-numeric-character-reference",
  "micromark-util-encode",
  "micromark-util-html-tag-name",
  "micromark-util-normalize-identifier",
  "micromark-util-resolve-all",
  "micromark-util-sanitize-uri",
  "micromark-util-subtokenize",
  "micromark-util-symbol",
  "micromark-util-types",
  "nanoid",
  "parse-entities",
  "property-information",
  "rehype-raw",
  "rehype-react",
  "rehype-sanitize",
  "rehype-stringify",
  "remark-breaks",
  "remark-external-links",
  "remark-parse",
  "remark-rehype",
  "space-separated-tokens",
  "stringify-entities",
  "trough",
  "unified",
  "unist-builder",
  "unist-util-generated",
  "unist-util-is",
  "unist-util-position",
  "unist-util-stringify-position",
  "unist-util-visit",
  "unist-util-visit-parents",
  "vfile",
  "vfile-message",
  "web-namespaces",
  "zwitch",
]);

module.exports = withPlugins([withTM, withBundleAnalyzer], {
  reactStrictMode: true,
  assetPrefix: process.env.NODE_ENV === "production" ? process.env.CDN_URL : "",
  compress: false,
});
